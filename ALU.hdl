// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
       IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    // Zero X
    Mux16(a=x, b=false, sel=zx, out=x0);

    // Negate X
    Not16(in=x0, out=negX);
    Mux16(a=x0, b=negX, sel=nx, out=x1);

    // Zero Y
    Mux16(a=y, b=false, sel=zy, out=y0);

    // Negate Y
    Not16(in=y0, out=negY);
    Mux16(a=y0, b=negY, sel=ny, out=y1);

    // And x and y
    And16(a=x1, b=y1, out=out0);

    // Add x and y
    Add16(a=x1, b=y1, out=out1);

    Mux16(a=out0, b=out1, sel=f, out=out2);

    // Negate output
    Not16(in=out2, out=negOut);
    Mux16(a=out2, b=negOut, sel=no, out[0..7]=left, out[8..15]=right, out[15]=ng, out=out);

    // Eq 0?
    Or8Way(in=left, out=foo0);
    Or8Way(in=right, out=foo1);

    Or(a=foo0, b=foo1, out=isNotZero);
    Not(in=isNotZero, out=zr);
}